import streamlit as st
import pandas as pd
import io
import uuid
from difflib import get_close_matches

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
st.set_page_config(page_title="–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ 1C –∏ Moz", layout="wide")

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±—ã: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
tabs = st.tabs(["üìÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"])

with tabs[0]:
    st.header("–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–æ–π")
    st.markdown("""
1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ **–¥–≤–∞** —Ñ–∞–π–ª–∞: _1C.xlsx_ –∏ _Moz.xlsx_ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –≤–æ –≤–∫–ª–∞–¥–∫–µ ¬´–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ¬ª.
2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **¬´–û–±—Ä–∞–±–æ—Ç–∞—Ç—å¬ª**.
3. –î–æ–∂–¥–∏—Ç–µ—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ **¬´–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç¬ª**.
4. –§–∞–π–ª—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞ –¥–∏—Å–∫: –≤—Å—ë –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –ø–∞–º—è—Ç–∏!

---

**–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –≤—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö**

- **–§–∞–π–ª 1C**:
    - `–Ω–æ–º–µ—Ä —Ä–µ–≥`
    - `–∫–æ–¥ 1—Å`
    - `–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–µ`
    - `—Ñ–æ—Ä–º–∞ –≤–∏–ø—É—Å–∫—É`
    - `–¥–æ–∑—É–≤–∞–Ω–Ω—è`
    - `–∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–∏–Ω–∏—Ü—å –ª—ñ–∫–∞—Ä—Å—å–∫–æ–≥–æ –∑–∞—Å–æ–±—É —É —Å–ø–æ–∂–∏–≤—á—ñ–π —É–ø–∞–∫–æ–≤—Ü—ñ`

- **–§–∞–π–ª Moz**:
    - `–º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∞ –Ω–µ–ø–∞—Ç–µ–Ω—Ç–æ–≤–∞–Ω–∞ –∞–±–æ –∑–∞–≥–∞–ª—å–Ω–æ–ø—Ä–∏–π–Ω—è—Ç–∞ –Ω–∞–∑–≤–∞ –ª—ñ–∫–∞—Ä—Å—å–∫–æ–≥–æ –∑–∞—Å–æ–±—É`
    - `—Ç–æ—Ä–≥–æ–≤–µ–ª—å–Ω–∞ –Ω–∞–∑–≤–∞ –ª—ñ–∫–∞—Ä—Å—å–∫–æ–≥–æ –∑–∞—Å–æ–±—É`
    - `—Ñ–æ—Ä–º–∞ –≤–∏–ø—É—Å–∫—É`
    - `–¥–æ–∑—É–≤–∞–Ω–Ω—è`
    - `–∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–∏–Ω–∏—Ü—å –ª—ñ–∫–∞—Ä—Å—å–∫–æ–≥–æ –∑–∞—Å–æ–±—É —É —Å–ø–æ–∂–∏–≤—á—ñ–π —É–ø–∞–∫–æ–≤—Ü—ñ`
    - `–Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è –≤–∏—Ä–æ–±–Ω–∏–∫–∞, –∫—Ä–∞—ó–Ω–∞`
    - `–∫–æ–¥ –∞—Ç—Ö`
    - `–Ω–æ–º–µ—Ä —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è –Ω–∞ –ª—ñ–∫–∞—Ä—Å—å–∫–∏–π –∑–∞—Å—ñ–±`
    - `–¥–∞—Ç–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Å—Ç—Ä–æ–∫—É –¥—ñ—ó —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è –Ω–∞ –ª—ñ–∫–∞—Ä—Å—å–∫–∏–π –∑–∞—Å—ñ–±`
    - `–∑–∞–¥–µ–∫–ª–∞—Ä–æ–≤–∞–Ω–∞ –∑–º—ñ–Ω–∞ –æ–ø—Ç–æ–≤–æ-–≤—ñ–¥–ø—É—Å–∫–Ω–æ—ó —Ü—ñ–Ω–∏`
    - `–æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –∫—É—Ä—Å —Ç–∞ –≤–∏–¥ —ñ–Ω–æ–∑–µ–º–Ω–æ—ó –≤–∞–ª—é—Ç–∏`
    - `–¥–∞—Ç–∞ —Ç–∞ –Ω–æ–º–µ—Ä –Ω–∞–∫–∞–∑—É –ú–û–ó –ø—Ä–æ –¥–µ–∫–ª–∞—Ä—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω –æ–ø—Ç–æ–≤–æ-–≤—ñ–¥–ø—É—Å–∫–Ω–æ—ó —Ü—ñ–Ω–∏ –Ω–∞ –ª—ñ–∫–∞—Ä—Å—å–∫—ñ –∑–∞—Å–æ–±–∏`

> –ï—Å–ª–∏ –≤ –≤–∞—à–∏—Ö —Ñ–∞–π–ª–∞—Ö –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ —á—É—Ç—å –æ—Ç–ª–∏—á–∞—é—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–º–µ–Ω–∏—Ç–µ –∏—Ö –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ –≤—ã—à–µ üòä
    """)

with tabs[1]:
    st.header("–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤")
    uploaded_1c = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª 1C (Excel)", type=['xls', 'xlsx'], key="file1c")
    uploaded_moz = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª Moz (Excel)", type=['xls', 'xlsx'], key="filemoz")

    if uploaded_1c and uploaded_moz:
        if st.button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å"):
            try:
                # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
                df_1c = pd.read_excel(uploaded_1c, engine='openpyxl')
                df_moz = pd.read_excel(uploaded_moz, engine='openpyxl')

                # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π
                def normalize_column_names(df, required_columns, column_mapping):
                    df.columns = df.columns.str.strip().str.lower()
                    mapping_lower = {k.lower(): v for k, v in column_mapping.items()}
                    df.rename(columns=mapping_lower, inplace=True)
                    for col in required_columns:
                        if col not in df.columns:
                            matches = get_close_matches(col, df.columns, n=1, cutoff=0.8)
                            if matches:
                                df.rename(columns={matches[0]: col}, inplace=True)
                    return df

                # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                def process_data(df_1c, df_moz):
                    required_1c = [
                        '–Ω–æ–º–µ—Ä —Ä–µ–≥', '–∫–æ–¥ 1—Å', '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–µ',
                        '—Ñ–æ—Ä–º–∞ –≤–∏–ø—É—Å–∫—É', '–¥–æ–∑—É–≤–∞–Ω–Ω—è', '–∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–∏–Ω–∏—Ü—å –ª—ñ–∫–∞—Ä—Å—å–∫–æ–≥–æ –∑–∞—Å–æ–±—É —É —Å–ø–æ–∂–∏–≤—á—ñ–π —É–ø–∞–∫–æ–≤—Ü—ñ'
                    ]
                    required_moz = [
                        '–º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∞ –Ω–µ–ø–∞—Ç–µ–Ω—Ç–æ–≤–∞–Ω–∞ –∞–±–æ –∑–∞–≥–∞–ª—å–Ω–æ–ø—Ä–∏–π–Ω—è—Ç–∞ –Ω–∞–∑–≤–∞ –ª—ñ–∫–∞—Ä—Å—å–∫–æ–≥–æ –∑–∞—Å–æ–±—É',
                        '—Ç–æ—Ä–≥–æ–≤–µ–ª—å–Ω–∞ –Ω–∞–∑–≤–∞ –ª—ñ–∫–∞—Ä—Å—å–∫–æ–≥–æ –∑–∞—Å–æ–±—É',
                        '—Ñ–æ—Ä–º–∞ –≤–∏–ø—É—Å–∫—É', '–¥–æ–∑—É–≤–∞–Ω–Ω—è',
                        '–∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–∏–Ω–∏—Ü—å –ª—ñ–∫–∞—Ä—Å—å–∫–æ–≥–æ –∑–∞—Å–æ–±—É —É —Å–ø–æ–∂–∏–≤—á—ñ–π —É–ø–∞–∫–æ–≤—Ü—ñ',
                        '–Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è –≤–∏—Ä–æ–±–Ω–∏–∫–∞, –∫—Ä–∞—ó–Ω–∞',
                        '–∫–æ–¥ –∞—Ç—Ö',
                        '–Ω–æ–º–µ—Ä —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è –Ω–∞ –ª—ñ–∫–∞—Ä—Å—å–∫–∏–π –∑–∞—Å—ñ–±',
                        '–¥–∞—Ç–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Å—Ç—Ä–æ–∫—É –¥—ñ—ó —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è –Ω–∞ –ª—ñ–∫–∞—Ä—Å—å–∫–∏–π –∑–∞—Å—ñ–±',
                        '–∑–∞–¥–µ–∫–ª–∞—Ä–æ–≤–∞–Ω–∞ –∑–º—ñ–Ω–∞ –æ–ø—Ç–æ–≤–æ-–≤—ñ–¥–ø—É—Å–∫–Ω–æ—ó —Ü—ñ–Ω–∏',
                        '–æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –∫—É—Ä—Å —Ç–∞ –≤–∏–¥ —ñ–Ω–æ–∑–µ–º–Ω–æ—ó –≤–∞–ª—é—Ç–∏',
                        '–¥–∞—Ç–∞ —Ç–∞ –Ω–æ–º–µ—Ä –Ω–∞–∫–∞–∑—É –º–æ–∑ –ø—Ä–æ –¥–µ–∫–ª–∞—Ä—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω –æ–ø—Ç–æ–≤–æ-–≤—ñ–¥–ø—É—Å–∫–Ω–æ—ó —Ü—ñ–Ω–∏ –Ω–∞ –ª—ñ–∫–∞—Ä—Å—å–∫—ñ –∑–∞—Å–æ–±–∏'
                    ]

                    df_1c = normalize_column_names(df_1c, required_1c, {})
                    df_moz = normalize_column_names(df_moz, required_moz, {})

                    df_1c = df_1c[df_1c['–Ω–æ–º–µ—Ä —Ä–µ–≥'].astype(str).str.contains('UA', na=False)]

                    matched_indices = set()
                    output = []

                    for code in df_moz['–Ω–æ–º–µ—Ä —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è –Ω–∞ –ª—ñ–∫–∞—Ä—Å—å–∫–∏–π –∑–∞—Å—ñ–±'].unique():
                        df_moz_code = df_moz[df_moz['–Ω–æ–º–µ—Ä —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è –Ω–∞ –ª—ñ–∫–∞—Ä—Å—å–∫–∏–π –∑–∞—Å—ñ–±'] == code]
                        df_1c_code = df_1c[df_1c['–Ω–æ–º–µ—Ä —Ä–µ–≥'] == code]
                        if len(df_moz_code) == 1 and len(df_1c_code) == 1:
                            idx = df_moz_code.index[0]
                            matched_indices.add(idx)
                            row_1c = df_1c_code.iloc[0]
                            row_moz = df_moz_code.iloc[0]
                            output.append({
                                '–ö–æ–¥ 1–°': row_1c['–∫–æ–¥ 1—Å'],
                                '–¶–µ–Ω–∞': row_moz['–∑–∞–¥–µ–∫–ª–∞—Ä–æ–≤–∞–Ω–∞ –∑–º—ñ–Ω–∞ –æ–ø—Ç–æ–≤–æ-–≤—ñ–¥–ø—É—Å–∫–Ω–æ—ó —Ü—ñ–Ω–∏'],
                                '–ù–æ–º–µ—Ä —Ä–µ–≥': row_1c['–Ω–æ–º–µ—Ä —Ä–µ–≥'],
                                '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–µ': row_1c['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–µ']
                            })
                        else:
                            for idx, row_moz in df_moz_code.iterrows():
                                matches = df_1c_code[
                                    (df_1c_code['—Ñ–æ—Ä–º–∞ –≤–∏–ø—É—Å–∫—É'] == row_moz['—Ñ–æ—Ä–º–∞ –≤–∏–ø—É—Å–∫—É']) &
                                    (df_1c_code['–¥–æ–∑—É–≤–∞–Ω–Ω—è'] == row_moz['–¥–æ–∑—É–≤–∞–Ω–Ω—è']) &
                                    (df_1c_code['–∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–∏–Ω–∏—Ü—å –ª—ñ–∫–∞—Ä—Å—å–∫–æ–≥–æ –∑–∞—Å–æ–±—É —É —Å–ø–æ–∂–∏–≤—á—ñ–π —É–ø–∞–∫–æ–≤—Ü—ñ'] == row_moz['–∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–∏–Ω–∏—Ü—å –ª—ñ–∫–∞—Ä—Å—å–∫–æ–≥–æ –∑–∞—Å–æ–±—É —É —Å–ø–æ–∂–∏–≤—á—ñ–π —É–ø–∞–∫–æ–≤—Ü—ñ'])
                                ]
                                if not matches.empty:
                                    matched_indices.add(idx)
                                    row_1c2 = matches.iloc[0]
                                    output.append({
                                        '–ö–æ–¥ 1–°': row_1c2['–∫–æ–¥ 1—Å'],
                                        '–¶–µ–Ω–∞': row_moz['–∑–∞–¥–µ–∫–ª–∞—Ä–æ–≤–∞–Ω–∞ –∑–º—ñ–Ω–∞ –æ–ø—Ç–æ–≤–æ-–≤—ñ–¥–ø—É—Å–∫–Ω–æ—ó —Ü—ñ–Ω–∏'],
                                        '–ù–æ–º–µ—Ä —Ä–µ–≥': row_1c2['–Ω–æ–º–µ—Ä —Ä–µ–≥'],
                                        '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–µ': row_1c2['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–µ']
                                    })
                                    break

                    matched_df = pd.DataFrame(output)
                    unmatched_df = df_moz.drop(index=matched_indices)
                    return matched_df, unmatched_df

                # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                matched_df, unmatched_df = process_data(df_1c, df_moz)

                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ Excel –≤ –ø–∞–º—è—Ç–∏
                buffer = io.BytesIO()
                with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
                    matched_df.to_excel(writer, sheet_name='Matched', index=False)
                    unmatched_df.to_excel(writer, sheet_name='Unmatched_Moz', index=False)
                buffer.seek(0)

                # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                filename = f"output_{uuid.uuid4().hex}.xlsx"
                st.download_button(
                    "–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                    data=buffer,
                    file_name=filename,
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
